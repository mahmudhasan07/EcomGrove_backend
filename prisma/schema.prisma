// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  phoneNumber String
  role        Role      @default(USER) @map("role")
  address     String
  city        String
  state       String
  zipCode     String
  uploadImage String?
  status      Status?   @default(PENDING)
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  Comment     Comment[]

  @@map("user")
}

model Product {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  brandName    String
  price        Float
  discount     Float?       @default(0)
  categoryType CategoryList
  category     String
  rating       Float?       @default(0)
  images       String[]     @default([])
  comments     Comment[]
  cart         Cart[]
  createAt     DateTime     @default(now())
  updateAt     DateTime     @updatedAt

  @@map("product")
}

model Cart {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  productId      String   @db.ObjectId 
  userId         String   @db.ObjectId
  quantity       Int
  productDetails Product? @relation(fields: [productId], references: [id])
  @@map("cart")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  productId String?  @db.ObjectId
  comment   String
  rating    Float
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])

  @@map("comment")
}

model OTPModel {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  otp      String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

enum Status {
  ACTIVE
  PENDING
  BLOCKED
}

enum Role {
  ADMIN
  USER
}

enum CategoryList {
  ELECTRONICS
  Home_Kitchen
  BEAUTY
  SPORTS
  FASHION
  TOYS
}
